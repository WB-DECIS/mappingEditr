% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{update_correct_table}
\alias{update_correct_table}
\title{Update Correct Table in JSON Data}
\usage{
update_correct_table(json_data, table_name, updated_data)
}
\arguments{
\item{json_data}{A list representing the JSON-like object containing the data to be updated.}

\item{table_name}{A character string specifying the name of the table to update.
If the table name is `"components"`, the function updates the `component` field;
otherwise, it updates the `representation` field.}

\item{updated_data}{The new data to assign to the specified table. It should match the structure
expected by the targeted table within the JSON-like object.}
}
\value{
The updated `json_data` object with the specified table updated with the `updated_data`.
}
\description{
Updates a specific table within a JSON-like object based on the provided table name and updated data.
}
\details{
This function is designed to handle updates to specific parts of a JSON-like object. The
         structure of the `json_data` is assumed to have either a `component` or `representation`
         field that stores the tables being updated. The choice of which field to update depends
         on the value of `table_name`.
}
\examples{
# Example JSON-like data
json_data <- list(
  component = list(components = data.frame(id = 1, value = "A")),
  representation = list(other_table = data.frame(id = 2, value = "B"))
)

# Updated data for the "components" table
updated_data <- data.frame(id = 3, value = "C")

# Update the "components" table
updated_json <- update_correct_table(json_data, "components", updated_data)

# Check the updated JSON
print(updated_json$component$components)

}
